;; Object gc/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "gc/"
  :tables (list 
   (semanticdb-table "gc_inline.h"
    :major-mode 'c-mode
    :tags 
        '( ("GC_INLINE_H" variable (:constant-flag t) nil [696 707])
            ("gc.h" include nil nil [1535 1550])
            ("gc_tiny_fl.h" include nil nil [1551 1574])
            ("GC_EXPECT" variable (:constant-flag t) nil [1603 1612])
            ("GC_ASSERT" variable (:constant-flag t) nil [1828 1837])
            ("GC_generic_malloc_many" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2132 2148])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [2149 2161])
                    ("" variable
                       (:pointer 2
                        :type "void")
                        (reparse-symbol arg-sub-list) [2205 2226]))                  
                :type ("GC_CALL" type (:type "class") nil nil))
                nil [2101 2227])
            ("GC_FAST_MALLOC_GRANS" variable (:constant-flag t) nil [3588 3608])
            ("GC_WORDS_TO_WHOLE_GRANULES" variable (:constant-flag t) nil [5178 5204])
            ("GC_MALLOC_WORDS" variable (:constant-flag t) nil [5802 5817])
            ("GC_MALLOC_ATOMIC_WORDS" variable (:constant-flag t) nil [6082 6104])
            ("GC_CONS" variable (:constant-flag t) nil [6440 6447]))          
    :file "gc_inline.h"
    :pointmax 6806
    :fsize 6805
    :lastmodtime '(20540 29512)
    :unmatched-syntax '((VOID 2096 . 2100) (symbol 2089 . 2095))
    :lexical-table 
        '(("GC_CONS" (spp-arg-list ("result" "first" "second" "tiny_fl") 6447 . 6479) . ((semantic-list "{ \\
    size_t grans = GC_WORDS_TO_WHOLE_GRANULES(2); \\
    GC_FAST_MALLOC_GRANS(result, grans, tiny_fl, 0, \\
                         NORMAL, GC_malloc(grans*GC_GRANULE_BYTES), \\
                         *(void **)(result) = (void *)(first)); \\
    ((void **)(result))[1] = (void *)(second); \\
}" 6482 . 6778)))
          ("GC_MALLOC_ATOMIC_WORDS" (spp-arg-list ("result" "n" "tiny_fl") 6104 . 6122) . ((semantic-list "{ \\
    size_t grans = GC_WORDS_TO_WHOLE_GRANULES(n); \\
    GC_FAST_MALLOC_GRANS(result, grans, tiny_fl, 0, \\
                         PTRFREE, GC_malloc_atomic(grans*GC_GRANULE_BYTES), \\
                         (void)0 /* no initialization */); \\
}" 6125 . 6375)))
          ("GC_WORDS_TO_WHOLE_GRANULES" (spp-arg-list ("n") 5204 . 5207) . ((symbol "GC_WORDS_TO_GRANULES" 5218 . 5238) (semantic-list "((n) + GC_GRANULE_WORDS - 1)" 5238 . 5266)))
          ("GC_ASSERT" (spp-arg-list ("expr") 1837 . 1843))
          ("GC_FAST_MALLOC_GRANS" (spp-arg-list ("result" "granules" "tiny_fl" "num_direct" "\\
" "kind" "default_expr" "init") 3608 . 3699) . ((semantic-list "{ \\
    if (GC_EXPECT((granules) >= GC_TINY_FREELISTS,0)) { \\
        result = (default_expr); \\
    } else { \\
        void **my_fl = (tiny_fl) + (granules); \\
        void *my_entry=*my_fl; \\
        void *next; \\
 \\
        while (GC_EXPECT((GC_word)my_entry \\
                        <= (num_direct) + GC_TINY_FREELISTS + 1, 0)) { \\
            /* Entry contains counter or NULL */ \\
            if ((GC_word)my_entry - 1 < (num_direct)) { \\
                /* Small counter value, not NULL */ \\
                *my_fl = (char *)my_entry + (granules) + 1; \\
                result = (default_expr); \\
                goto out; \\
            } else { \\
                /* Large counter or NULL */ \\
                GC_generic_malloc_many(((granules) == 0? GC_GRANULE_BYTES : \\
                                        GC_RAW_BYTES_FROM_INDEX(granules)), \\
                                       kind, my_fl); \\
                my_entry = *my_fl; \\
                if (my_entry == 0) { \\
                    result = (*GC_get_oom_fn())((granules)*GC_GRANULE_BYTES); \\
                    goto out; \\
                } \\
            } \\
        } \\
        next = *(void **)(my_entry); \\
        result = (void *)my_entry; \\
        *my_fl = next; \\
        init; \\
        PREFETCH_FOR_WRITE(next); \\
        GC_ASSERT(GC_size(result) >= (granules)*GC_GRANULE_BYTES); \\
        GC_ASSERT((kind) == PTRFREE || ((GC_word *)result)[1] == 0); \\
      out: ; \\
   } \\
}" 3702 . 5167)))
          ("GC_INLINE_H")
          ("GC_EXPECT" (spp-arg-list ("expr" "outcome") 1612 . 1627) . ((symbol "__builtin_expect" 1628 . 1644) (semantic-list "(expr,outcome)" 1644 . 1658)))
          ("GC_MALLOC_WORDS" (spp-arg-list ("result" "n" "tiny_fl") 5817 . 5835) . ((semantic-list "{ \\
    size_t grans = GC_WORDS_TO_WHOLE_GRANULES(n); \\
    GC_FAST_MALLOC_GRANS(result, grans, tiny_fl, 0, \\
                         NORMAL, GC_malloc(grans*GC_GRANULE_BYTES), \\
                         *(void **)(result) = 0); \\
}" 5838 . 6071)))
          )

    )
   )
  :file "!usr!include!gc!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.0"
  )
